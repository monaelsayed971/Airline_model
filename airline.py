# -*- coding: utf-8 -*-
"""Airline.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a60U8mGBKs55HJmFAEyMkfqgLqwVF3yr
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('train.csv')

df_clean=df.copy()

df_clean.head(3)

df_clean.info()

df_clean.isna().sum()

df_clean['Arrival Delay in Minutes']

df_clean['Arrival Delay in Minutes']=df_clean['Arrival Delay in Minutes'].fillna(np.mean(df_clean['Departure Delay in Minutes']))

df_clean.describe()

df_clean= df_clean.drop('Unnamed: 0',axis=1)

df_clean= df_clean.drop('id',axis=1)

df_clean.head()

cat_cols=df_clean.select_dtypes(include='O').columns.tolist()

for col in cat_cols:
    print(df_clean[col].value_counts())

"""The count of Female passengers are  with 52727"""

num_cols = df_clean.select_dtypes(include=[np.number]).columns.tolist()
num_cols

for col in num_cols:
    print(df_clean[col].value_counts())

df_clean.columns

def countplot(col, title):
    ax = plt.title( title , fontsize = 16)
    ax = sns.countplot(data=df_clean , x = col)
    for label in ax.containers:
        ax.bar_label(label)

countplot('Gender', 'Gender')

countplot('Customer Type', 'Customer Type')

countplot('Type of Travel', 'Type of Travel')

countplot('Class', 'Class')

df_clean['Arrival Delay in Minutes'].hist(bins=10)

df_clean['Flight Distance'].hist(bins=10)
plt.xlabel('Flight Distance')
plt.ylabel('Count')

df_clean['Age'].hist(bins=30)
plt.xlabel('Age')

num_col=['Departure Delay in Minutes',
 'Age',
 'Flight Distance',
 'Inflight wifi service',
 'Departure/Arrival time convenient',
 'Ease of Online booking',

]

plt.figure(figsize = (15 , 10))
for i , col in enumerate(num_col,1):
    plt.subplot(2,3,i)
    sns.histplot(data = df_clean , x= col)

n_co=['Gate location',
 'Food and drink',
 'Online boarding',
 'Seat comfort',
 'Inflight entertainment',
 'On-board service',
 ]

plt.figure(figsize = (15 , 10))
for i , col in enumerate(n_co,1):
    plt.subplot(2,3,i)
    sns.histplot(data = df_clean , x= col)

n_c=['Leg room service',
 'Checkin service',
 'Inflight service',
 'Cleanliness',
 'Departure Delay in Minutes',
         'Baggage handling']

plt.figure(figsize = (15 , 10))
for i , col in enumerate(n_c,1):
    plt.subplot(2,3,i)
    sns.histplot(data = df_clean , x= col)

df_clean.head(3)

df_clean.groupby(['Gender'])['satisfaction'].value_counts()

sns.countplot(x='Gender',hue='satisfaction',data=df_clean)

f,ax =plt.subplots(1,2,figsize=(20,5))
sns.boxplot(x='Customer Type',y='Age',data=df_clean,ax=ax[0])
sns.histplot(df_clean,x='Age',hue='Customer Type',ax=ax[1])

f,ax =plt.subplots(1,2,figsize=(20,5))
sns.boxplot(x='Class',y='Age',data=df_clean,ax=ax[0])
sns.histplot(df_clean,x='Age',hue='Class',ax=ax[1])

grouped = df_clean.groupby(['Gender', 'satisfaction']).size()
totals = df_clean.groupby(['Gender']).size()
percentages = grouped / totals * 100
percentages

"""precent of female dissatisfied is more than satisfied is precent 57.2 %

precent of male dissatisfied is more than satisfied is precent:56%
"""

df_clean.groupby(['Class'])['satisfaction'].value_counts()

sns.countplot(x='Class',hue='satisfaction',data=df_clean)

sns.countplot(x='Inflight wifi service',hue='satisfaction',data=df_clean)

columns =['Inflight wifi service','Departure/Arrival time convenient','Ease of Online booking','Gate location','Food and drink','Online boarding','Seat comfort','Inflight entertainment','On-board service','Leg room service','Baggage handling','Checkin service','Inflight service','Cleanliness']

def satisfi(x):
    if x in range(0,2):
        return 'angry'
    elif x in range(2,4):
        return 'mediated'
    elif x in range(4,5):
        return 'satisfied'
    else:
        return 'the best'
df_clean['satisficatio_stat']=df_clean['Overall Satisfaction'].apply(satisfi)

df_clean['satisficatio_stat'].value_counts()

df_clean['Overall Satisfaction']= round(df_clean[columns].sum(axis=1) / len(columns)).astype(int)

sns.countplot(x='Gender',hue='satisficatio_stat',data=df_clean)

sns.countplot(x='Class',hue='satisficatio_stat',data=df_clean)

sns.countplot(x='Customer Type',hue='satisficatio_stat',data=df_clean)

"""People in business class seems to be the most satisfied lot, and those in economy class are least satisfied"""

grouped = df_clean.groupby(['Customer Type', 'satisfaction']).size()
totals = df_clean.groupby(['Customer Type']).size()
percentages = grouped / totals * 100
percentages

sns.countplot(x='Customer Type',hue='satisfaction',data=df_clean)

"""Number of loyal customers for this airline is high, however, the dissatisfaction level is high irrespective of the loyalty"""

grouped = df_clean.groupby(['Type of Travel', 'satisfaction']).size()
totals = df_clean.groupby(['Type of Travel']).size()
percentages = grouped / totals * 100
percentages

sns.countplot(x='Type of Travel',hue='satisfaction',data=df_clean)

"""Business Travellers seems to be more satisfied with the flight is precent 58 %, than the personal travellers"""

data = pd.DataFrame(df_clean).corr()

sns.heatmap(data, linewidth=.5,cmap = 'Blues')

df_clean= df_clean.drop('satisficatio_stat',axis=1)

df_clean= df_clean.drop('Arrival Delay in Minutes',axis=1)

df_clean= df_clean.drop('Overall Satisfaction',axis=1)

df_clean.columns

X=df_clean.drop('satisfaction',axis=1)
y=df_clean['satisfaction']

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
from sklearn.preprocessing import StandardScaler
enc = OneHotEncoder(handle_unknown='ignore')
sc = StandardScaler()
ct = ColumnTransformer(
    [
        ('encoding' , enc , cat_cols ) ,
        ('scaling' , sc , num_cols)
    ])

cat_cols=['Gender', 'Customer Type', 'Type of Travel', 'Class']

num_cols=['Age',
 'Flight Distance',
 'Inflight wifi service',
 'Departure/Arrival time convenient',
 'Ease of Online booking',
 'Gate location',
 'Food and drink',
 'Online boarding',
 'Seat comfort',
 'Inflight entertainment',
 'On-board service',
 'Leg room service',
 'Baggage handling',
 'Checkin service',
 'Inflight service',
 'Cleanliness',
 'Departure Delay in Minutes'
]

ct.fit(X_train)
x_train = ct.transform(X_train)
x_test = ct.transform(X_test)

df_clean.head()

from sklearn.linear_model import LogisticRegression
clf = LogisticRegression(random_state=0)

clf.fit(x_train, y_train)
clf.score(x_test , y_test)
y_pred = clf.predict(x_test)

from sklearn.metrics import accuracy_score
print('Train Accuracy: ', accuracy_score(y_train, clf.predict(x_train)))
print('Test Accuracy: ', accuracy_score(y_test, y_pred))

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier()

# Train the model
clf.fit(x_train, y_train)

# Predict
y_pred = clf.predict(x_test)

# Accuracy
from sklearn.metrics import accuracy_score
print('Train Accuracy: ', accuracy_score(y_train, clf.predict(x_train)))
print('Test Accuracy: ', accuracy_score(y_test, y_pred))

from sklearn.neighbors import KNeighborsClassifier
clf = KNeighborsClassifier(n_neighbors=3)
clf.fit(x_train, y_train)
y_pred = clf.predict(x_test)

# Accuracy
from sklearn.metrics import accuracy_score
print('Train Accuracy: ', accuracy_score(y_train, clf.predict(x_train)))
print('Test Accuracy: ', accuracy_score(y_test, y_pred))

